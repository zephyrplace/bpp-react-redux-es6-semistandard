{
    "react-component-class": {
        "prefix": "rcc",
        "body": [
            "import React, { Component } from 'react'",
            "",
            "export default class $1 extends Component {",
            "  render () {",
            "    return (",
            "      <div>$2</div>",
            "    )",
            "  }",
            "}",
            ""
        ],
        "description": "Create a React Component Class"
    },
    "react-component-stateless": {
        "prefix": "rcs",
        "body": [
            "import React from 'react'",
            "",
            "const $1 = () => {",
            "  return (",
            "    <div>$2</div>",
            "  )",
            "}",
            "",
            "export default $1",
            ""
        ],
        "description": "Create a React Component Stateless"
    },
    "react-component-class-proptypes": {
        "prefix": "rccp",
        "body": [
            "import React, { Component } from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "class $1 extends Component {",
            "  render () {",
            "    return (",
            "      <div>$3</div>",
            "    )",
            "  }",
            "}",
            "",
            "$1.propTypes = {",
            "  $2",
            "}",
            "",
            "export default $1",
            ""
        ],
        "description": "Create a React Component Class with PropTypes"
    },
    "react-component-stateless-proptypes": {
        "prefix": "rcsp",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "const $1 = props => {",
            "  return (",
            "    <div>$3</div>",
            "  )",
            "}",
            "",
            "$1.propTypes = {",
            "  $2",
            "}",
            "",
            "export default $1",
            ""
        ],
        "description": "Create a React Component Class with PropTypes"
    },
    "react-redux-container-connect": {
        "prefix": "rrcc",
        "body": [
            "import { bindActionCreators } from 'redux'",
            "import { connect } from 'react-redux'",
            "",
            "const mapStateToProps = (state) => ({ $1: state.$2 })",
            "const mapDispatchToProps = (dispatch) => bindActionCreators($3, dispatch)",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)($4)",
            ""
        ],
        "description": "Create a Redux Container with connect and bindActionCreators"
    },
    "redux-reducer": {
        "prefix": "rrdc",
        "body": [
            "export default (state = $1, action) => {",
            "  switch (action.type) {",
            "    case $2:",
            "      $3",
            "    default:",
            "      return state",
            "  }",
            "}",
            ""
        ],
        "description": "Create a Redux Reducer"
    },
    "redux-action-function": {
        "prefix": "raf",
        "body": [
            "export const $1 = '$1'",
            "",
            "export const $2 = $3 => ({",
            "  type: $1,",
            "  $3",
            "})",
            ""
        ],
        "description": "Create a Redux action function"
    },
    "redux-action-function-return": {
        "prefix": "rafr",
        "body": [
            "export const $1 = $2 => {",
            "  return $3",
            "}",
            ""
        ],
        "description": "Create a Redux action function with return"
    },
    "componentProps": {
        "prefix": "tp",
        "body": "this.props.$0",
        "description": "Access component's props"
    },
    "componentState": {
        "prefix": "ts",
        "body": "this.state.$0",
        "description": "Access component's state"
    },
    "propTypeArray": {
        "prefix": "pta",
        "body": "PropTypes.array,",
        "description": "Array prop type"
    },
    "propTypeArrayRequired": {
        "prefix": "ptar",
        "body": "PropTypes.array.isRequired,",
        "description": "Array prop type required"
    },
    "propTypeBool": {
        "prefix": "ptb",
        "body": "PropTypes.bool,",
        "description": "Bool prop type"
    },
    "propTypeBoolRequired": {
        "prefix": "ptbr",
        "body": "PropTypes.bool.isRequired,",
        "description": "Bool prop type required"
    },
    "propTypeFunc": {
        "prefix": "ptf",
        "body": "PropTypes.func,",
        "description": "Func prop type"
    },
    "propTypeFuncRequired": {
        "prefix": "ptfr",
        "body": "PropTypes.func.isRequired,",
        "description": "Func prop type required"
    },
    "propTypeNumber": {
        "prefix": "ptn",
        "body": "PropTypes.number,",
        "description": "Number prop type"
    },
    "propTypeNumberRequired": {
        "prefix": "ptnr",
        "body": "PropTypes.number.isRequired,",
        "description": "Number prop type required"
    },
    "propTypeObject": {
        "prefix": "pto",
        "body": "PropTypes.object,",
        "description": "Object prop type"
    },
    "propTypeObjectRequired": {
        "prefix": "ptor",
        "body": "PropTypes.object.isRequired,",
        "description": "Object prop type required"
    },
    "propTypeString": {
        "prefix": "pts",
        "body": "PropTypes.string,",
        "description": "String prop type"
    },
    "propTypeStringRequired": {
        "prefix": "ptsr",
        "body": "PropTypes.string.isRequired,",
        "description": "String prop type required"
    },
    "propTypeNode": {
        "prefix": "ptnd",
        "body": "PropTypes.node,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array"
    },
    "propTypeNodeRequired": {
        "prefix": "ptndr",
        "body": "PropTypes.node.isRequired,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array required"
    },
    "propTypeElement": {
        "prefix": "ptel",
        "body": "PropTypes.element,",
        "description": "React element prop type"
    },
    "propTypeElementRequired": {
        "prefix": "ptelr",
        "body": "PropTypes.element.isRequired,",
        "description": "React element prop type required"
    },
    "propTypeInstanceOf": {
        "prefix": "pti",
        "body": "PropTypes.instanceOf($0),",
        "description": "Is an instance of a class prop type"
    },
    "propTypeInstanceOfRequired": {
        "prefix": "ptir",
        "body": "PropTypes.instanceOf($0).isRequired,",
        "description": "Is an instance of a class prop type required"
    },
    "propTypeEnum": {
        "prefix": "pte",
        "body": "PropTypes.oneOf(['$0']),",
        "description": "Prop type limited to specific values by treating it as an enum"
    },
    "propTypeEnumRequired": {
        "prefix": "pter",
        "body": "PropTypes.oneOf(['$0']).isRequired,",
        "description": "Prop type limited to specific values by treating it as an enum required"
    },
    "propTypeOneOfType": {
        "prefix": "ptet",
        "body": "PropTypes.oneOfType([\n\t$0\n]),",
        "description": "An object that could be one of many types"
    },
    "propTypeOneOfTypeRequired": {
        "prefix": "ptetr",
        "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
        "description": "An object that could be one of many types required"
    },
    "propTypeArrayOf": {
        "prefix": "ptao",
        "body": "PropTypes.arrayOf($0),",
        "description": "An array of a certain type"
    },
    "propTypeArrayOfRequired": {
        "prefix": "ptaor",
        "body": "PropTypes.arrayOf($0).isRequired,",
        "description": "An array of a certain type required"
    },
    "propTypeObjectOf": {
        "prefix": "ptoo",
        "body": "PropTypes.objectOf($0),",
        "description": "An object with property values of a certain type"
    },
    "propTypeObjectOfRequired": {
        "prefix": "ptoor",
        "body": "PropTypes.objectOf($0).isRequired,",
        "description": "An object with property values of a certain type required"
    },
    "propTypeShape": {
        "prefix": "ptsh",
        "body": "PropTypes.shape({\n\t$0\n}),",
        "description": "An object taking on a particular shape"
    },
    "propTypeShapeRequired": {
        "prefix": "ptshr",
        "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
        "description": "An object taking on a particular shape required"
    }
}